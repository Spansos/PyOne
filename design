variables:
    there is a vars func that returns a dict
        vars = (lambda x: lambda: x)({})
    this is used for variables

    set func is:
        setvar = lambda name, value: (vars.__setitem__(name, value))
    
    get func is:
        getvar = lambda name: vars()[name]

func defs:
    fun name arg1 arg2
        fun
    
    ret for return value, won't stop func:
        fun name arg1 arg2
            ret fun
            fun
    
    func can make func:
        fun name arg1 arg2
            ret fun name arg1 arg2
                ret 1

    var definitions in function are still global
    var name is global:
        fun name arg1 arg2
            var name value


    compiles to:
        name = lambda arg1, arg2, ...: (line1, line2, line3)[ret_index]

expressions:
    any and all expressions will be implemented as functions

std funcs:
    the family of names of ln[num] (such as ln2, ln5) is reserved