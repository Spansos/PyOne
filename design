prog will be like:
(lambda: ((var := 'value'), (fun := lambda: 2), print(fun(), var)))()

loops will be
(labmda: ((_loop := [0]), _body := lambda: (loop body), [(_body(), _loop.append(1)) for i in _loop if <cond>]))()

------------------------
    IGNORE ALL BELOW
    DO JUST ABOVE
------------------------
datatypes:
    bool, int, float, str, and table (pythons dict or lua's
    table, named after lua's, since they will be used like those)

    int is a number without a decimal point,
    float is a number with decimal point
    str is characters
    table is some numbers with indexes (standart indexes being 0, 1, 2, ...)


variables:
    there is a vars func that returns a dict
        vars = (lambda x: lambda: x)({})
    this dict contains all user-defined and std variables

    vars can be set with =:
        var = 2
    this will compile to set func with proper scope

    vars can be referenced with their name:
        var2 = var1

    strings and tables can be indexed with . and []
        table['a'] == table.a


func defs:
    fun name(arg1, arg2) {
        line1
        line2
        ...
    }

    return to return value:
        fun name() {
            return 2
        }
        var = name()
    var is equeal to 2

    func can make func:
        fun name(arg1, arg2) {
            return fun r_fun() {
                return value
            }
        }
    
    funcs can be assigned to vars:
        fun name(arg1 arg2) {
            line1
            line2
            ...
        }
        var = name
        var(val val)

    function bodys are in a new scope

    a func compiled is (scope, lines)

    scope is a tuple wherein the first item is
    a dict containing all local functions, and the second
    item is the parent scope, a tuple
    
    lines is a tuple of lines such as
    (add args to local vars, line1, line2, line3)[index of return]
    
    a line is a lambda func of two parts. part one
    is a func that updates the current line path, part two is the actual expression
    a = 2 would become lambda: (jmp(1), setvar(scope, a, 2))

    the global var _ will automatically be set to the last evaluated
    line value. so actualy
    a = 2 would become lambda: (jmp(1), setvar(main[0], '_', setvar(scope, a, 2)))


inaccessible std funcs & vars:
    for funcs & vars that will be in every program, but that shouldn't be used directly.
    these won't be like normal vars, they will be added directly as global lambda funcs or variables in
    final python prog

    run = lambda path, prog: prog[1][path[0]] if isinstance(path[0], int) else run(path[1:], prog[0][0][path[0]])
    prog = (({'main': prog_as_func}, None), ())
    setvar = lambda scope, name, value: scope[0].get(name, None)
    getvar = lambda scope, name: scope[0][name] if name in scope[0] else getvar(scope[1], name)
    linepath = [[0]]
    run = lambda path, prog: prog[1][path[-1][0]]() if isinstance(path[-1][0], int) else run([*path[:-1], path[-1][1:]], prog[0][0][path[-1][0]])


expressions:
    =, +, -, /, //, %, <, >, <=, >=, [] and some others if i feel like it will be implemented
    with symbols all other expressions will be made with functions


accessible std funcs:
    all functions that python has for list, dict, set and maybe more will be added


running:
    the function run and the variables linen and lines will be used for running things.

    lines will hold all the lines of a program in a list [line1, line2, line3, ...].
    a function will also be a list of all its lines, automatically assigned to a var.

    so a program with a fun def on line 2 would look like [line1, line2 (makes var of [funline1, funline2, ...]), line3, ...]

    a var named linepath will hold the curently executing line number, and how we got there.\


    