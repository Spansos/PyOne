datatypes:
    int, float, str, and table (pythons dict or lua's
    table, named after lua's, since they will be used like those)

    int is a number without a decimal point,
    float is a number with decimal point
    str is characters
    table is some numbers with indexes (standart indexes being 0, 1, 2, ...)


variables:
    there is a vars func that returns a dict
        vars = (lambda x: lambda: x)({})
    this dict contains all user-defined and std variables

    vars can be set with =:
        var = 2
    this will compile to set func

    vars can be referenced with their name:
        var2 = var1

    strings and tables can be indexed with . and []
        table['a'] == table.a
    
    vars will be replaced by a scope path during compilation
    var a in scope b will be stored like ('b', 'a') in vars


func defs:
    fun name(arg1, arg2) {
        line1
        line2
        ...
    }


    return to return value:
        fun name() {
            return 2
        }
        var = name()
    var is equeal to 2

    func can make func:
        fun name(arg1, arg2) {
            return fun r_fun() {
                return value
            }
        }
    
    funcs can be assigned to vars:
        fun name(arg1 arg2) {
            line1
            line2
            ...
        }
        var = name
        var(val val)

    function bodys are in a new scope

    a func compiled is (name, {'scope': {}, 'lines': (line1, line2, ...)}


inaccessible std funcs & vars:
    for funcs that will be in every program, but that shouldn't be used directly.
    these won't be in vars, they will be added directly as global lambda funcs in
    final python prog

    vars = {}
    setvar = lambda varpath, value: vars.__setitem__(varpath, value)
    getvar = lambda varpath: vars.__getitem__(varpath)
    linepath = [0]


expressions:
    =, +, -, /, //, %, <, >, <=, >=, [] and some others if i feel like it will be implemented
    with symbols all other expressions will be made with functions


accessible std funcs:
    all functions that python has for list, dict, set and maybe more will be added


running:
    the function run and the variables linen and lines will be used for running things.

    lines will hold all the lines of a program in a list [line1, line2, line3, ...].
    a function will also be a list of all its lines, automatically assigned to a var.

    so a program with a fun def on line 2 would look like [line1, line2 (makes var of [funline1, funline2, ...]), line3, ...]

    a var named linepath will hold the curently executing line number, and how we got there.
    